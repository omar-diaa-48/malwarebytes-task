import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { MongooseModule } from '@nestjs/mongoose';
import modules from './modules';
import { SocketModule } from './modules/socket/socket.module';
import { AppGateway } from './app.gateway';
import { IsAuthenticatedMiddleware } from './middlewares/is-authenticated.middleware';
import { APP_GUARD } from '@nestjs/core';
import { AuthGuard } from './guards/auth.guard';

@Module({
	imports: [
		// Config module to parse env variables
		ConfigModule.forRoot({
			isGlobal: true
		}),

		// Mongoose module to initialize mongodb connection
		MongooseModule.forRootAsync({
			imports: [ConfigModule],

			useFactory: async (configService: ConfigService) => {
				const DATABASE_URI = configService.get('DATABASE_URI');

				console.log({ DATABASE_URI });


				return {
					uri: DATABASE_URI
				}
			},

			inject: [ConfigService]
		}),

		// Main app modules
		...modules,

		// Socket module
		SocketModule
	],
	controllers: [],
	providers: [AppGateway],
})
export class AppModule implements NestModule {
	configure(consumer: MiddlewareConsumer) {
		consumer
			.apply(IsAuthenticatedMiddleware)
			.forRoutes('/')
	}
}
