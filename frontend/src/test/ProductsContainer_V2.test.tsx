import { waitFor } from '@testing-library/react'
import { rest } from 'msw'
import { setupServer } from 'msw/node'
import { afterAll, afterEach, beforeAll, describe, expect, it } from 'vitest'
import { setupStore } from '../store'
import { getAllProductsAsyncAction } from '../store/slices/products'
import { renderWithProviders } from '../utils/test/test-utils'
import ProductsContainerComponent from '../components/products/ProductsContainer_V2'

const mockedProducts = {
	"Mobile phones": [
		{
			"_id": "6443fb7443ab7130f4547491",
			"title": "Apple iphone 11 red",
			"description": "The iPhone 11 display has rounded corners that follow a beautiful curved design, and these corners are within a standard rectangle. When measured as a standard rectangular shape, the screen is 6.06 inches diagonally (actual viewable area is less)",
			"availableCount": 2,
			"price": 699,
			"productCategory": {
				"_id": "6443fb7443ab7130f454748d",
				"title": "Mobile phones",
				"description": "(IOS and Android)",
				"__v": 0
			},
			"__v": 0
		},
		{
			"_id": "6443fb7443ab7130f4547492",
			"title": "Apple iphone 12 blue",
			"description": "The iPhone 11 display has rounded corners that follow a beautiful curved design, and these corners are within a standard rectangle. When measured as a standard rectangular shape, the screen is 6.06 inches diagonally (actual viewable area is less)",
			"availableCount": 4,
			"price": 750,
			"productCategory": {
				"_id": "6443fb7443ab7130f454748d",
				"title": "Mobile phones",
				"description": "(IOS and Android)",
				"__v": 0
			},
			"__v": 0
		}
	],
	"Laptops": [
		{
			"_id": "6443fb7443ab7130f4547493",
			"title": "HP Victus",
			"description": "15-fa0032dx Gaming Laptop - 12th Intel Core i7-12650H 10-Cores, 16GB RAM, 512GB SSD, NVIDIA RTX3050Ti 4GB GDDR6 Graphics, 15.6 inch FHD (1920x1080) IPS 144Hz, Backlit KB, Windows 11- Mica Silver",
			"availableCount": 9,
			"price": 1312,
			"productCategory": {
				"_id": "6443fb7443ab7130f454748f",
				"title": "Laptops",
				"description": "New and used ones",
				"__v": 0
			},
			"__v": 0
		}
	]
}

export const handlers = [
	rest.get(import.meta.env.VITE_BACKEND_URL + '/products', (req, res, ctx) => {
		return res(ctx.json({
			data: mockedProducts
		}))
	})
]

const server = setupServer(...handlers)

// Enable API mocking before tests.
beforeAll(() => server.listen())

// Reset any runtime request handlers we may add during the tests.
afterEach(() => server.resetHandlers())

// Disable API mocking after the tests are done.
afterAll(() => server.close())


describe('Products container component renders correctly', async () => {
	it('renders products container', async () => {
		const store = setupStore();
		await store.dispatch(getAllProductsAsyncAction())

		const { getByTestId } = renderWithProviders(<ProductsContainerComponent />)

		expect(getByTestId("test_products-container")).toBeDefined()
	})

	it('renders products container with correct products length', async () => {
		const store = setupStore();

		await store.dispatch(getAllProductsAsyncAction())

		const products = store.getState().products;

		const { queryAllByTestId } = renderWithProviders(<ProductsContainerComponent />)

		await waitFor(() => {
			expect(queryAllByTestId("test_grouped-products-container")).toBeDefined();
		})

		expect(queryAllByTestId("test_grouped-products-group")).toHaveLength(Object.keys(products.items).length)
	})
})