import React, { useEffect, useState } from 'react'
import { ProductItem } from '../../interfaces/responses/product'
import { useAppDispatch, useAppSelector } from '../../store/hooks';
import { closeModalAction } from '../../store/slices/app';
import CloseIcon from '@mui/icons-material/Close';
import { Input } from '@mui/material';
import CustomButton from '../shared/CustomButton';
import { addItemToCart, removeItemFromCart } from '../../store/slices/cart';
import { RootState } from '../../store';
import { decrementProductAsyncAction, incrementProductAsyncAction } from '../../store/slices/products';
import { toast } from 'react-toastify';
import TEST_IDS from '../../utils/test/test-ids';
import socketConnection from '../../socket';

interface ProductModalProps {
	productId: string;
	categoryTitle: string;
}

const ProductModal: React.FC<ProductModalProps> = ({ productId, categoryTitle }) => {
	const dispatch = useAppDispatch();
	const { items: productItems } = useAppSelector((state: RootState) => state.products)
	const { items: cartItems } = useAppSelector((state: RootState) => state.cart)

	const [item, setItem] = useState<ProductItem | null>(null);

	useEffect(() => {
		const currentItem = productItems[categoryTitle]?.find((item) => item._id === productId);
		if (currentItem) {
			setItem(currentItem);
		}
	}, [productId, categoryTitle, cartItems[productId]])

	const handleAddToCart = () => {
		if (item) {
			socketConnection.emit('decrement-product-item', { productId })
		}
	}

	const handleRemoveFromCart = () => {
		if (item) {
			if (cartItems[item._id] && cartItems[item._id].countInCart > 0) {
				socketConnection.emit('increment-product-item', { productId })
			}
			else {
				toast('Item not in the cart')
			}
		}
	}

	if (!item) {
		return (
			<div />
		)
	}

	return (
		<div data-testid={TEST_IDS.MODALS.PRODUCT} className="bg-white rounded-lg shadow dark:bg-gray-700">
			<div className="flex items-center gap-x-2 p-4 border-b rounded-t dark:border-gray-600">
				<h3 className="text-xl font-semibold text-gray-900 dark:text-white">{item.title}</h3>
				<p>${item.price}</p>

				{
					cartItems[item._id] && (
						<div>
							<span>In cart: </span>
							<Input type='number' readOnly value={cartItems[item._id].countInCart} className='w-12' />
						</div>
					)
				}

				<div>
					<span>In stock: </span>
					<Input type='number' readOnly value={item.availableCount} className='w-12' />
				</div>
				<div className='flex-1' />
				<CloseIcon className='cursor-pointer' onClick={() => dispatch(closeModalAction())} />
			</div>
			<div className="flex flex-col md:flex-row p-6 space-y-6 space-x-3">
				<div className='flex flex-col'>
					<p className="text-base leading-relaxed text-gray-500 dark:text-gray-400">{item.productCategory?.title}</p>
					<p className="text-base leading-relaxed text-gray-500 dark:text-gray-400">{item.description}</p>
				</div>

				<div className="flex flex-col gap-y-4">
					<CustomButton onClick={handleAddToCart} className='rounded-sm px-2 bg-green-500' type="button" disabled={item.availableCount < 1} >Add to cart</CustomButton>
					<CustomButton disabled={cartItems[item._id]?.countInCart < 1} onClick={handleRemoveFromCart} className='rounded-sm px-2 bg-yellow-500' type="button">Remove from cart</CustomButton>
				</div>
			</div>
		</div>
	)
}

export default ProductModal