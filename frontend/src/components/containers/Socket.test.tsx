import io from 'socket.io-client';
import { render, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import Socket from './Socket';
import { AppStore, setupStore } from '../../store';
import { afterEach, beforeEach, describe, expect, it, vi, Mock } from 'vitest';
import { ProductCategory, ProductItem } from '../../interfaces/responses/product';

vi.mock('socket.io-client');

describe('Socket', () => {
	let store: AppStore;

	beforeEach(() => {
		store = setupStore({
			products: {
				items: {
					'Category 1': [{ _id: '1', title: 'Product 1', description: '', price: 500, availableCount: 2, productCategory: { _id: '1', title: 'Category 1', description: '' } }]
				}
			}
		});
	});

	afterEach(() => {
		vi.clearAllMocks();
	});

	it('should listen to the "product-item-change" event and dispatch the correct actions', async () => {
		const productCategory = { _id: '1', title: 'Category 1' } as ProductCategory;
		const productItem = { _id: '1', title: 'Product 1', availableCount: 2, productCategory } as ProductItem;

		const action = 'decreased';

		const mockSocketConnection = {
			on: vi.fn((event, callback) => {
				if (event === 'product-item-change') {
					callback({ productItem, action });
				}
			}),
			close: vi.fn(),
		};

		(io as Mock).mockImplementationOnce(() => mockSocketConnection);

		vi.spyOn(mockSocketConnection, 'on');
		vi.spyOn(mockSocketConnection, 'close');

		render(
			<Provider store={store}>
				<Socket />
			</Provider>
		);

		await waitFor(() => expect(mockSocketConnection.on).toHaveBeenCalledTimes(1));

		expect(store.getState().app.modal.isOpened).toBe(true);
		expect(store.getState().app.modal.current).toBe('message-modal');
		expect(store.getState().app.modal.args).toMatchObject({
			header: 'Someone changed the data:',
			content: 'Product 1 decreased by 1',
		});
	});

	it('should close the socket connection on cleanup', async () => {
		const mockSocketConnection = {
			on: vi.fn(),
			close: vi.fn(),
		};

		(io as Mock).mockImplementationOnce(() => mockSocketConnection);

		const { unmount } = render(
			<Provider store={store}>
				<Socket />
			</Provider>
		);

		unmount();

		expect(mockSocketConnection.close).toHaveBeenCalledTimes(1);
	});
});