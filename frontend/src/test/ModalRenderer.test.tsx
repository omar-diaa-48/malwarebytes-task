import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import { beforeEach, describe, expect, it } from 'vitest';
import { RootState, setupStore } from '../store';
import ModalRenderer from '../components/shared/ModalRenderer';
import { AppStore } from '../store';
import { closeModalAction, openModalAction } from '../store/slices/app';
import TEST_IDS from '../utils/test/test-ids';
import { ModalType } from '../utils/types';

describe('ModalRenderer', () => {
	let store: AppStore;
	let initialState: RootState;

	beforeEach(() => {
		store = setupStore();
	});

	it('should not render anything when modal is not opened', () => {
		render(
			<Provider store={store}>
				<ModalRenderer />
			</Provider>
		);

		const modalContainer = screen.queryByTestId(TEST_IDS.MODALS.CONTAINER);
		expect(modalContainer).toBeNull();
	});

	it('should render the correct modal when modal is opened', () => {
		const current: ModalType = 'product-modal';
		const args = { productId: '1', categoryTitle: 'Laptops' };

		render(
			<Provider store={store}>
				<ModalRenderer />
			</Provider>
		);

		store.dispatch(openModalAction({ current, args }));

		expect(store.getState().app.modal.isOpened).toEqual(true);
		expect(store.getState().app.modal.current).toEqual(current);
		expect(store.getState().app.modal.args).toMatchObject(args);
	});

	it('should close the modal when modal is closed', () => {
		const current: ModalType = 'product-modal';
		const args = { productId: '1', categoryTitle: 'Laptops' };

		render(
			<Provider store={store}>
				<ModalRenderer />
			</Provider>
		);

		store.dispatch(openModalAction({ current, args }));

		expect(store.getState().app.modal.isOpened).toEqual(true);
		expect(store.getState().app.modal.current).toEqual(current);
		expect(store.getState().app.modal.args).toMatchObject(args);

		store.dispatch(closeModalAction());

		expect(store.getState().app.modal.isOpened).toBe(false);
		expect(store.getState().app.modal.current).toBe(" ");
		expect(store.getState().app.modal.args).toEqual({});
	});
});