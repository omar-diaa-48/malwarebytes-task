import { Test, TestingModule } from '@nestjs/testing';
import { Model } from 'mongoose';
import { UserService } from './user.service';
import { User } from 'src/models/user';
import { getModelToken } from '@nestjs/mongoose';
import { AuthDto } from '../auth/auth.dto';
import * as bcrypt from "bcrypt"

describe('UserService', () => {
	let service: UserService;
	let userModel: Model<User>;

	const mockUserModel = {
		findOne: jest.fn(),
		create: jest.fn(),
		exec: jest.fn()
	};

	const mockUser: User = {
		_id: '1',
		username: 'testuser',
		password: bcrypt.hashSync('testpassword', 10),
	} as User;

	const mockAuthDto: AuthDto = {
		username: 'testuser',
		password: 'testpassword',
	};

	beforeEach(async () => {
		const module: TestingModule = await Test.createTestingModule({
			providers: [
				UserService,
				{
					provide: getModelToken('User'),
					useValue: mockUserModel,
				},
			],
		}).compile();

		service = module.get<UserService>(UserService);
		userModel = module.get<Model<User>>(getModelToken('User'));
	});

	afterEach(() => {
		jest.resetAllMocks();
	});

	describe('findUserByUserName', () => {
		it('should call userModel.findOne with the correct username', async () => {
			mockUserModel.findOne.mockResolvedValueOnce(mockUser);

			await service.findUserByUserName(mockUser.username);

			expect(mockUserModel.findOne).toHaveBeenCalledWith({ username: mockUser.username });
		});

		it('should return the user if found', async () => {
			mockUserModel.findOne.mockResolvedValueOnce(mockUser);

			const result = await service.findUserByUserName(mockUser.username);

			expect(result).toEqual(mockUser);
		});

		it('should return null if user is not found', async () => {
			mockUserModel.findOne.mockResolvedValueOnce(null);

			const result = await service.findUserByUserName(mockUser.username);

			expect(result).toBeNull();
		});
	});

	describe('createUser', () => {
		it('should call userModel.create with the correct arguments', async () => {
			mockUserModel.create.mockResolvedValueOnce(mockUser);

			await service.createUser(mockAuthDto);

			expect(mockUserModel.create).toHaveBeenCalledWith({
				username: mockAuthDto.username,
				password: expect.any(String),
			});
		});

		it('should return the created user', async () => {
			mockUserModel.create.mockResolvedValueOnce(mockUser);

			const result = await service.createUser(mockAuthDto);

			expect(result).toEqual(mockUser);
		});
	});
});