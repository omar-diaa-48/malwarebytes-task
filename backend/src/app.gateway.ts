import { OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit, SubscribeMessage, WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { SocketService } from './modules/socket/socket.service';
import { ProductsService } from './modules/products/products.service';

@WebSocketGateway({
	cors: {
		origin: process.env.FRONTEND_URL,
	},
})

export class AppGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {

	constructor(
		private socketService: SocketService,
		private productsService: ProductsService
	) { }

	@WebSocketServer() public server: Server;

	afterInit(server: Server) {
		this.socketService.socket = server;
	}

	handleDisconnect(client: Socket) {
		console.log(`client with id ${client.id} disconnected`);
	}

	async handleConnection(client: Socket, ...args: any[]) {
		console.log(`client with id ${client.id} is connected`);
	}

	@SubscribeMessage('increment-product-item')
	async incrementProduct(client: Socket, payload: { productId: string }): Promise<void> {
		const { valid, productItem } = await this.productsService.incrementProduct(payload.productId);

		this.socketService.socket.emit('product-item-change', { productItem })
		
		if (valid) {
			client.broadcast.emit('notify-product-item-change', { productItem, action: 'increased' })
		}
	}

	@SubscribeMessage('decrement-product-item')
	async decrementProduct(client: Socket, payload: { productId: string }): Promise<void> {
		const { valid, productItem } = await this.productsService.decrementProduct(payload.productId);

		this.socketService.socket.emit('product-item-change', { productItem })
		
		if (valid) {
			client.broadcast.emit('notify-product-item-change', { productItem, action: 'increased' })
		}
	}
}