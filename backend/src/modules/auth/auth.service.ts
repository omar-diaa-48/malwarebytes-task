import { BadRequestException, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';
import { UserService } from '../user/user.service';
import { AuthDto } from './auth.dto';
import { JwtPayload } from './dto/jwt-payload';
import * as jwt from "jsonwebtoken";
import * as bcrypt from "bcrypt";
import { ConfigService } from '@nestjs/config';
import { ERROR_MESSAGES } from 'src/utils/message';

@Injectable()
export class AuthService {
	constructor(
		private configService: ConfigService,
		private userService: UserService,
	) { }

	async login(dto: AuthDto): Promise<JwtPayload> {
		const { username, password } = dto;

		const user = await this.userService.findUserByUserName(username);

		if (!user) {
			throw new NotFoundException(ERROR_MESSAGES.AUTH.NOT_AUTHORIZED)
		}

		const isValidCredentials = bcrypt.compareSync(password, user.password)

		if (!isValidCredentials) {
			throw new NotFoundException(ERROR_MESSAGES.AUTH.NOT_AUTHORIZED)
		}

		const payload: JwtPayload = {
			id: user._id,
			username: user.username,
		}

		const jwt_token = jwt.sign(payload, this.configService.get<string>("TOKEN_SECRET"));

		payload.jwt_token = jwt_token;

		return payload;
	}

	async register(dto: AuthDto): Promise<JwtPayload> {
		const { username, password } = dto;

		let user = await this.userService.findUserByUserName(username);

		if (user) {
			throw new BadRequestException(ERROR_MESSAGES.AUTH.DUPLICATE_USER)
		}

		user = await this.userService.createUser({ username, password })

		const payload: JwtPayload = {
			id: user._id,
			username: user.username,
		}

		const jwt_token = jwt.sign(payload, this.configService.get<string>("TOKEN_SECRET"));

		payload.jwt_token = jwt_token;

		return payload;
	}

	async jwtSignIn(user: JwtPayload): Promise<JwtPayload> {
		if (!user) {
			throw new UnauthorizedException(ERROR_MESSAGES.AUTH.NOT_AUTHORIZED)
		}

		const currentUser = await this.userService.findUserByUserName(user.username)

		if (!currentUser) {
			throw new UnauthorizedException(ERROR_MESSAGES.AUTH.NOT_AUTHORIZED)
		}

		const payload: JwtPayload = {
			id: user.id,
			username: user.username,
		}

		const jwt_token = jwt.sign(payload, this.configService.get<string>("TOKEN_SECRET"));

		payload.jwt_token = jwt_token;

		return payload;
	}
}