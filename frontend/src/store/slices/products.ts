import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import api from "../../utils/api";
import { ActionPayloadType, AxiosResponseDataType } from "../../utils/types";
import { GroupedProducts } from "../../interfaces/responses/product";

export interface ProductsState {
	items: GroupedProducts;
}

const initialState = {
	items: {}
} as ProductsState;

export const getAllProductsAsyncAction = createAsyncThunk<GroupedProducts, void>('products/refreshToken', async (val, { rejectWithValue }) => {
	try {
		const res = await api.get('/products');

		const data: AxiosResponseDataType<GroupedProducts> = res.data;

		return data.data;
	} catch (err) {
		return rejectWithValue(err)
	}
})

export const productsSlice = createSlice({
	name: 'products',
	initialState,
	reducers: {},
	extraReducers: {
		[getAllProductsAsyncAction.fulfilled.type]: (state, action: ActionPayloadType<GroupedProducts>) => {
			const items = action.payload;

			return {
				...state,
				items
			};
		}
	}
})

export default productsSlice.reducer